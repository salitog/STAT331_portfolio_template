---
title: "Lab 7: Functions and Fish"
author: "Sal Gutierrez"
format:
  html:
    self-contained: true
    code-tools: true
    code-fold: true
execute:
  echo: true
  error: false
  message: false
  warning: false
---

# **Lab 7: Functions and Fish**

The goal of this lab is learn more about exploring missing data and to teach you to write modular code.

```{r setup}
library(tidyverse)
library(here)
library(knitr)
library(ggridges)
library(cowplot)
library(purrr)
```

## **1 The Data**

```{r importing-data}
fish <- read_csv(here("Labs", "Lab 7", "BlackfootFish.csv"))
kable(head(fish, 5))
```

This lab's dataset concerns mark-recapture data on fish from the Blackfoot River, outside of Helena, Montana.

Mark-recapture is a common method used by Ecologists to estimate an animal population's size, when it is impossible to conduct a census (count every animal). This method works by "tagging" animals with a tracking device, so scientists can track their movement and / or presence.

```{r data-summary}
dim(fish)
```

In this dataset, we have 18352 rows and 7 variables. Each row represents the measurements of weight, and length of a fish in the study in a specific trip the ecologists did in a given year.

## **2 Part One: Summaries and Plots (Midterm Review)**

### **2.1 Summarizing Missing Data**

The measurements of each fish captured were taken by a Biologist on a raft. This lack of "laboratory setting" opens the door to the possibility of measurement errors.

-   What variable(s) have missing values present?

-   How many observations within each variable have missing values?

```{r summ-missing-data}
fish |>
  map_int(~sum(is.na(.))) |> # counting all NAs in all variables
  as.data.frame() |> # converting to a dataframe to use dyplr functions
  rename(NaSum = 1) # renames the first column name to NaSum

# Idea for as.data.frame gotten from https://stackoverflow.com/questions/30745206/convert-list-returned-by-sapply-to-a-data-frame
```

::: {.callout-note icon="false"}
From above, the only variable with NAs was weight, which I think is a pretty important variable and to valuable to not have all data points for. That is almost 10% of all weight measurements missing.
:::

### **2.2 Visualizing Missing Data**

Unfortunately, these missing values are not for only one `year`, `trip`, or `section` of river.

Create a thoughtful visualization exploring the frequency of missing values across the different years, sections, and trips.

```{r visual-missing}
missing_data <- fish |>
  group_by(year, trip, section) |>
  summarize(nas = sum(is.na(weight))) |>
  ungroup()

ggplot(missing_data, 
       mapping = aes(x = as.factor(year), 
                     y = nas, 
                     fill = as.factor(trip))) +
  geom_bar(stat = "identity") +
  labs(x = "Year", 
       y = "", 
       title = "Total Number of NAs by Year and Section",
       fill = "Trip Number") +
  facet_grid(~ section) + 
  scale_fill_manual(values = c("#3c76af",
                               "#bfd550")) +
  scale_x_discrete(guide = guide_axis(n.dodge = 2)) # move x labels to alternate
```

## **3 Part Two: Adjusting the Data (Function Writing)**

If I wanted to rescale every quantitative variable in my dataset so that the variables have values between 0 and 1. I could use the following formula:

![](images/Screenshot%202023-03-03%20at%201.44.03%20AM.png){width="435"}

### **3.1 Writing a Function**

Let's transform the repeated process above into a `rescale_01()` function.

-   The function should take a single vector as its input.

-   The function should return the rescaled vector.

```{r}
#Eliminating the duplicated process from the problem
rescale_01 <- function(x) {
  if (! is.numeric(x)) {
    stop(paste("Vector is not numerical but of class type: ", class(x)))
  }
  if (length(x) < 1) {
    stop(paste("Vector's length must be at least 1. Got length ", length(x)))
  }
  # stopifnot(is.numeric(x), length(x) > 1)
  (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
}

#calling the rescale_01 function
rescaled <- fish |> 
  mutate(length = rescale_01(length),
         weight = rescale_01(weight))
kable(head(rescaled, 8))
```

### **3.2 Adding Stops**

Now, let's incorporate some checks into your function! Modify your previous code to create the following checks:

-   the function should stop if the input vector is not numeric

-   the function should stop if the length of the vector is not greater than 1

::: callout-caution
**No need to write code here, simply add these stops to your code from Task 1!**
:::

### **3.3 Performing a Simple Test**

First, test your function on the simple vector below. **Add code** that verifies the maximum of your rescaled vector is 1 and the minimum is 0!

::: callout-caution
**Yes, you need to add code here!**
:::

```{r}
x <- c(1:85, NA)
rescaled_x <- rescale_01(x)

if (min(rescaled_x, na.rm = TRUE) == 0  &&
    max(rescaled_x, na.rm = TRUE) == 1) {
  print("Function correctly scaled! :)")
}
```

## **3.4 Performing a More Difficult Test**

Next, let's test the function on the `length` column of the `BlackfootFish` dataset.

Make plots of the original values of `length` and the rescaled values of `length`. Output your plots **stacked vertically**, so the reader can confirm the only aspect that has changed is the scale.

::: callout-tip
By stacked vertically, I mean that the x-axis of the two plots should be stacked on top of each other!
:::

```{r stacked-compare}
rescaled_fish <- fish |>
  mutate(rescaled = rescale_01(length))

# Create density plots with both original and rescaled length values
original_plot <- ggplot(data = rescaled_fish, 
                        mapping = aes(x = length)) +
  geom_density(alpha = 0.5, 
               fill = "lightgreen") +
  labs(title = "Density Distribution of Original Length Values",
       x = "Length",
       y = "")

rescaled_plot <- ggplot(data = rescaled_fish,
                        mapping = aes(x = rescaled)) +
  geom_density(alpha = 0.5, fill = "lightblue") +
  labs(title = "Density Distribution of Rescaled Length Values",
       x = "Rescaled Length",
       y = "")

# Stack the plots vertically using ggplot2
plot_grid(original_plot, rescaled_plot, nrow = 2, align = "v")

# Idea for plot_grid takne from https://wilkelab.org/cowplot/articles/plot_grid.html
```

## **3.5 Incorportaing Variables**

Suppose you would like to make a more general `rescale_column()` function that perform operations on any variable within a dataset. Ideally, your function would take a dataframe and a variable name as inputs and return a dataframe where the variable has been rescaled.

Create a `rescale_column()` that accepts two arguments:

1.  a dataframe

2.  the name(s) of the variable(s) to be rescaled

The body of the function should call the original `rescale_01()` function you wrote previously.

```{r new-rescale}
rescale_column <- function(df, var_names){
  df[, var_names] <- map_df(df[, var_names], rescale_01)
  
  return(df)
}
```

### **3.6 Another Function Test**

Alright, now let's put your `rescale_column()` function to work! Use your `rescale_column()` function to rescale **both** the `length` and `weight` columns.

::: callout-caution
I expect that you carry out this process by calling the `rescale()` function *one* time!

I advise against using functions like `mutate_at()`, which have been superseded.
:::

```{r test-rescale-column}
test <- fish |>
  rescale_column(c("length", "weight"))

kable(head(test, 5))
```
